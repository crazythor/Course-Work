{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 1)\
a)\
swap(1,3,myList)\
i=1		[A, B, C, D, E]\
j=3		[A, D, B, C, D, E]\
s=B		[A, D, B, B, C, D, E]\
\
b)\
void swap(int i, int j, ListADT<String> myList0) \{\
	String s = myList.remove(i);\
	myList.add(i, myList.remove(j - 1));\
	myList.add(j, s);\
\}\
\
2)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 public static <E> ArrayList<E> flatten(ArrayList<ArrayList<E>> myList) \{\
\
	if(myList == null) throws BadListException;\
	if(myList.isEmpty() \{\
		return new ArrayList<E> emptyList;\
	\}\
	Iterator<E> currentItr = myList.iterator();\
		while(currentItr.hasNext()) \{\
			Iterator<E> duplicateItr = myList.iterator();\
			E current = currentItr.next();\
			while(cure != duplicateItr.next());\
			while( duplicateItr.hasNext()) \{\
				if(current.equals(duplicateItr.next())\
					myList.remove(duplicateItr);\
			\}\
		\}\
	new ArrayList<E> result;\
	\
	Iterator<E> copyItr = myList.iterator();\
		while(tcopyItr.hasNext()) \{\
			E copy = copyItr.next();\
			result.add();\
		\}\
	return result;\
\}}